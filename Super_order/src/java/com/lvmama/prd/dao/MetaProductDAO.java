package com.lvmama.prd.dao;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;

import com.lvmama.comm.BaseIbatisDAO;
import com.lvmama.comm.bee.po.meta.MetaProduct;
import com.lvmama.comm.bee.po.meta.MetaProductHotel;
import com.lvmama.comm.bee.po.meta.MetaProductOther;
import com.lvmama.comm.bee.po.meta.MetaProductRoute;
import com.lvmama.comm.bee.po.meta.MetaProductTicket;
import com.lvmama.comm.bee.po.meta.MetaProductTraffic;
import com.lvmama.comm.pet.po.work.WorkOrder;
import com.lvmama.comm.vo.Constant;

public class MetaProductDAO extends BaseIbatisDAO{

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table META_PRODUCT
	 * 
	 * @ibatorgenerated Tue Apr 20 11:55:56 CST 2010
	 */
	public Long insert(MetaProduct record) {
		Long id = (Long)super.insert("META_PRODUCT.insert", record);
		if (record instanceof MetaProductTicket) {
			super.insert("META_PRODUCT_TICKET.insert", record);
		}else if (record instanceof MetaProductHotel) {
			super.insert("META_PRODUCT_HOTEL.insert", record);
		}else if (record instanceof MetaProductRoute) {
			super.insert("META_PRODUCT_ROUTE.insert", record);
		}else if (record instanceof MetaProductOther) {
			super.insert("META_PRODUCT_OTHER.insert", record);
		}else if (record instanceof MetaProductTraffic) {
			super.insert("META_PRODUCT_TRAFFIC.insert", record);
		}
		return id;
	}
	
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table META_PRODUCT
	 * 
	 * @ibatorgenerated Tue Apr 20 11:55:56 CST 2010
	 */
	public int updateByPrimaryKey(MetaProduct record) {
		int rows = super.update("META_PRODUCT.updateByPrimaryKey", record);
		if (record instanceof MetaProductTicket) {
			super.update("META_PRODUCT_TICKET.updateByPrimaryKey", record);
		}else if (record instanceof MetaProductHotel) {
			super.update("META_PRODUCT_HOTEL.updateByPrimaryKey", record);
		}else if (record instanceof MetaProductRoute) {
			super.update("META_PRODUCT_ROUTE.updateByPrimaryKey", record);
		}else if (record instanceof MetaProductOther) {
			super.update("META_PRODUCT_OTHER.updateByPrimaryKey", record);
		}else if (record instanceof MetaProductTraffic) {
			super.update("META_PRODUCT_TRAFFIC.updateByPrimaryKeySelective", record);
		}
		return rows;
	}
	
	public Integer countMetaProduct(Map params) {
		Integer count = 0;
		count = (Integer) super.queryForObject("META_PRODUCT.countByParams", params);
		return count;
	}

	public List<MetaProduct> findMetaProduct(Map param) {
		List<MetaProduct> result = new ArrayList<MetaProduct>();
		if (param.get("_startRow")==null) {
			param.put("_startRow", 0);
		}
		if (param.get("_endRow")==null) {
			param.put("_endRow", 20);
		}
		result = (List<MetaProduct>) super.queryForList("META_PRODUCT.selectByParams",param);
		return result;
	}
		
	public List<MetaProduct> selectMetaProductByIds(List<Long> ids){
		if(CollectionUtils.isEmpty(ids)){
			return Collections.emptyList();
		}
		return super.queryForList("META_PRODUCT.selectMetaProductByIds",ids);
	}
		
	public List<MetaProduct> getMetaProductByProductId(Long productId) {
		return super.queryForList("META_PRODUCT.getMetaProductByProductId",productId);
	}
	
	public MetaProductRoute getMetaMetaProductRouteByProductId(Long productId) {
		return (MetaProductRoute) super.queryForObject("META_PRODUCT_ROUTE.selectByProductId",productId);
	}
	
	public MetaProductOther getMetaProductOtherByProductId(Long productId) {
		return (MetaProductOther) super.queryForObject("META_PRODUCT_OTHER.selectByProductId",productId);
	}
	
	public MetaProduct getMetaProduct(Long metaProductId, String type) {
		if (Constant.PRODUCT_TYPE.TICKET.name().equals(type)) {
			return (MetaProductTicket)super.queryForObject("META_PRODUCT.selectMetaProductTicketDetailByPrimaryKey", metaProductId);
		}else if (Constant.PRODUCT_TYPE.HOTEL.name().equals(type)) {
			return (MetaProductHotel)super.queryForObject("META_PRODUCT.selectMetaProductHotelDetailByPrimaryKey", metaProductId);
		}else if (Constant.PRODUCT_TYPE.ROUTE.name().equals(type)) {
			return (MetaProductRoute)super.queryForObject("META_PRODUCT.selectMetaProductRouteDetailByPrimaryKey", metaProductId);
		}else if (Constant.PRODUCT_TYPE.OTHER.name().equals(type)) {
			return (MetaProductOther) super.queryForObject("META_PRODUCT.selectMetaProductOtherDetailByPrimaryKey", metaProductId);
		}else if(Constant.PRODUCT_TYPE.TRAFFIC.name().equals(type)) {
			return (MetaProductTraffic) super.queryForObject("META_PRODUCT.selectMetaProductTrafficDetailByPrimaryKey", metaProductId);
		}
		return null;
	}
	
	public MetaProduct getMetaProductByPk(Long pk){
		MetaProduct mp = new MetaProduct();
		mp.setMetaProductId(pk);
		return (MetaProduct) super.queryForObject("META_PRODUCT.selectMetaProductByPk",mp);
	}
	
	public void markIsValid(Map params) {
		super.update("META_PRODUCT.markIsValid", params);
	}
	
	public Integer selectRowCount(Map searchConds){
		Integer count = 0;
		count = (Integer) super.queryForObject("META_PRODUCT.selectRowCount",searchConds);
 		return count;
	}
	
	public void updateManager(HashMap params) {
		super.update("META_PRODUCT.updateManager", params);
	}
	
	/**
	 * 批量修改销售产品id
	 * */
	public void updateOrgIds(Map<String, Object> params) {
		super.update("META_PRODUCT.updateOrgIds",params);
	}
 
	public List<MetaProduct> getMetaProductListByTargetId(Map<String, Object> params) {
		return super.queryForList("META_PRODUCT.getMetaProductListByTargetId", params);
	}
	
	public Integer getMetaProductListByTargetIdCount(Map<String, Object> params) {
		Integer count = 0;
		count = (Integer) super.queryForObject("META_PRODUCT.getMetaProductListByTargetIdCount", params);
		return count;
	}
	
	
	public List<MetaProduct> getMetaProductListByPerformTargetId(Map<String, Object> params) {
		return super.queryForList("META_PRODUCT.getMetaProductListByPerformTargetId", params);
	}
	public Integer getMetaProductListByPerformTargetIdCount(Map<String, Object> params) {
		Integer count = 0;
		count = (Integer) super.queryForObject("META_PRODUCT.getMetaProductListByPerformTargetIdCount", params);
		return count;
	}
	
	public List<MetaProduct> getEbkMetaProductByBranchIds(List<Long> metaBranchIds){
		return  super.queryForList("META_PRODUCT.getEbkMetaProductByBranchIds",metaBranchIds);
	}
	public List<MetaProduct> getEbkMetaProductByProductId(Long metaProductId){
		return super.queryForList("META_PRODUCT.getEbkMetaProductByProductId",metaProductId);
	}

	public Long selectMetaProductCountByTargetId(Long targetId, String targetType) {
		if("META_PERFORM".equalsIgnoreCase(targetType)) {
			return (Long) super.queryForObject("META_PRODUCT.selectMetaProductCountByPerformTargetId", targetId);
		} else if("META_B_CERTIFICATE".equalsIgnoreCase(targetType)) {
			return (Long) super.queryForObject("META_PRODUCT.selectMetaProductCountByCertificateTargetId", targetId);
		} else {
			return (Long) super.queryForObject("META_PRODUCT.selectMetaProductCountBySettlementTargetId", targetId);
		}
	}
	
	public MetaProduct getMetaProductByBranchId(Long branchId) {
		return (MetaProduct) super.queryForObject("META_PRODUCT.getMetaProductByBranchId", branchId);
	}
	
	public List<MetaProduct> getEbkUserMetaProductsByParam(Map<String, Object> params) {
		return super.queryForList("META_PRODUCT.getEbkUserMetaProductsByParam",params);
	}
	public MetaProduct getMetaProductByLineInfoId(final Long lineInfoId){
		MetaProductTraffic mpt = new MetaProductTraffic();
		mpt.setLineInfoId(lineInfoId);
		mpt = (MetaProductTraffic)super.queryForObject("META_PRODUCT_TRAFFIC.getMetaProductByLineInfoId",mpt);
		if(mpt!=null){
			return getMetaProduct(mpt.getMetaProductId(), Constant.PRODUCT_TYPE.TRAFFIC.name());
		}
		return null;
	}
	/**
	 * 不同于getMetaProductByProductId,这里只需取出在线的类别，做供应商合同审核校验
	 * */
	public List<MetaProduct> getMetaProductsByProductId(Long productId) {
		return super.queryForList("META_PRODUCT.getMetaProductsByProductId",productId);
	}
	
	public List<MetaProduct> getMetaProductsByProdBranchId(Long prodBranchId) {
		return super.queryForList("META_PRODUCT.getMetaProductsByProdBranchId",prodBranchId);
	}

	public MetaProductTraffic getTrainMetaProduct(String fullName) {
		// TODO Auto-generated method stub
		MetaProductTraffic traffic =  (MetaProductTraffic)super.queryForObject("META_PRODUCT.getTrainMetaProduct", fullName);
		if(traffic==null){
			return null;
		}
		return (MetaProductTraffic)this.getMetaProduct(traffic.getMetaProductId(), Constant.PRODUCT_TYPE.TRAFFIC.name());
	}
	
	/**
	 * 标记需要重发邮件了，库存已经为0
	 * @author haofeifei
	 * @createDate 2014-01-20
	 * @param parameters
	 * @return
	 */
	public void signSendEmail(Map<String,Object> parameters){
		 super.update("META_PRODUCT.signIsSendEmail", parameters);
	}
}