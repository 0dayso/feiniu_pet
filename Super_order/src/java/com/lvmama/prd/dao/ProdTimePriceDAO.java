package com.lvmama.prd.dao;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.lvmama.comm.BaseIbatisDAO;
import com.lvmama.comm.bee.po.prod.TimePrice;

public class ProdTimePriceDAO extends BaseIbatisDAO {
	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table PROD_TIME_PRICE
	 * 
	 * @ibatorgenerated Tue Apr 20 11:55:56 CST 2010
	 */
	public int deleteByPrimaryKey(Long timePriceId) {
		TimePrice key = new TimePrice();
		key.setTimePriceId(timePriceId);
		int rows = super.delete(
				"PROD_TIME_PRICE.deleteByPrimaryKey", key);
		return rows;
	}
	
	public void deleteByBeginDateAndEndDate(Map param) {
		super.delete("PROD_TIME_PRICE.deleteByBeginDateAndEndDate",param);
	}
	
	/**
	 * This method was generated by Apache iBATIS ibator. This method
	 * corresponds to the database table PROD_TIME_PRICE
	 * 
	 * @ibatorgenerated Tue Apr 20 11:55:56 CST 2010
	 */
	public void insert(TimePrice record) {
		super.insert("PROD_TIME_PRICE.insert",
				record);
	}

	public void update(TimePrice record) {
		super.update("PROD_TIME_PRICE.updateByPrimaryKey",record);
	}

	public void updateDynamic(TimePrice record) {
		super.update("PROD_TIME_PRICE.updateDynamicByPrimaryKey",record);
	}
	

	public void updateNoMultiJourneyFK(TimePrice record){
		super.update("PROD_TIME_PRICE.updateNoMultiJourneyFK", record);
	}
	
	/**
	 * 类别当中取最小价.非超级自由行需要读取是否有库存
	 * @param prodBranchId
	 * @param selfpack 是否为超级自由行
	 * @param nearDate
	 * @return
	 */
	public TimePrice selectLowestPriceByBranchId(Long prodBranchId,boolean selfpack, Date nearDate,int maxdays) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("nearDate", nearDate);
		map.put("prodBranchId", prodBranchId);
		map.put("maxdays",maxdays);
		if(selfpack){
			return (TimePrice)super.queryForObject("PROD_TIME_PRICE.selectLowestPriceByProductIdAndNearDate", map);
		}else{
			return (TimePrice)super.queryForObject("PROD_TIME_PRICE.selectLowestSalePriceByProductIdAndNearDate", map);
		}
	}

	/**
	 * 取销售产品下类别最近可售日期
	 * @param productId
	 * @param prodAheadHour 销售产品提前预订小时数
	 * @return
	 */
	public Date selectNearBranchTimePriceByBranchId(Long prodBranchId) {
		Map<String,Object> map=new HashMap<String, Object>();
		map.put("prodBranchId", prodBranchId);
		return (Date)super.queryForObject("PROD_TIME_PRICE.selectNearBranchTimePriceByBranchId", map);
	}
	
	/**
	 * 取销售产品下类别最近可售日期
	 * @param prodBranchId
	 * @param beginDay
	 * @return
	 */
	public Date selectNearBranchTimePriceByBranchIdAndDay(Long prodBranchId, Date beginDay) {
		Map<String,Object> map=new HashMap<String, Object>();
		map.put("prodBranchId", prodBranchId);
		map.put("day", beginDay);
		return (Date)super.queryForObject("PROD_TIME_PRICE.selectNearBranchTimePriceByBranchIdAndDay", map);
	}
	public TimePrice getProdTimePrice(Long productId,Long prodBranchId, Date date) {
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("productId",productId);
		param.put("prodBranchId",prodBranchId);
		param.put("specDate", date);
		List<TimePrice> list = super.queryForList("PROD_TIME_PRICE.selectProdTimePriceByParams", param);
		if (list.size()==1) {
			return list.get(0);
		}
		return null;
	}
	
	/**
	 * @author yangbin
	 * change:2012-2-15 下午12:47:32
	 * @param param
	 * @return
	 */
	public List<TimePrice> selectProdTimePriceByParams(Map param){
		return super.queryForList("PROD_TIME_PRICE.selectProdTimePriceByParams", param);
	}
	
	public TimePrice getPriceByBranchId(Long branchId , Long price){
		Map<String,Long> param = new HashMap<String, Long>();
		param.put("prodBranchId", branchId);
		param.put("price", price);
		return (TimePrice) super.queryForObject("PROD_TIME_PRICE.getPriceByBranchId", param);
	}
	
	public Integer selectProdTimePriceCountByProductId(Long productId){
		return (Integer)super.queryForObject("PROD_TIME_PRICE.selectProdTimePriceCountByProductId",productId);
	}
	
	public List<TimePrice> selectNotFixedPriceList(Long prodBranchId,Date start,Date end){
		TimePrice record=new TimePrice();
		record.setBeginDate(start);
		record.setEndDate(end);
		record.setProdBranchId(prodBranchId);
		return super.queryForList("PROD_TIME_PRICE.selectNotFixedPriceList",record);
	}
	
	public Date selectMaxTimePriceByProdBranchId(Long prodBranchId){
		try{
			return (Date)super.queryForObject("PROD_TIME_PRICE.selectMaxTimePriceByProdBranchId",prodBranchId);
		}catch(Exception ex){
			return null;
		}
	}
	
	public Date selectMaxTimePriceByProductId(Long productId){
		try{
			return (Date)super.queryForObject("PROD_TIME_PRICE.selectMaxTimePriceByProductId",productId);
		}catch(Exception ex){
			return null;
		}
	}
	
	public TimePrice getMinOrMaxTimePriceByMetaBranchId(Long prodBranchId, boolean isMax) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("prodBranchId", prodBranchId);
		params.put("isMax", isMax);
		return (TimePrice) super.queryForObject("PROD_TIME_PRICE.getMinOrMaxTimePriceByMetaBranchId", params);
	}
	
	/**
	 * 取不定期类别的有效开始日期和结束日期
	 * */
	public List<Date> selectValidBranchTimePriceByBranchId(Long prodBranchId) {
		return super.queryForList("PROD_TIME_PRICE.selectValidBranchTimePriceByBranchId", prodBranchId);
	}
	
	public void deleteTimePriceByMultiJourneyId(Map<String, Long> params) {
		super.update("PROD_TIME_PRICE.deleteTimePriceByMultiJourneyId", params);
	}
	
	public List<Long> getBranchIdsByMultiJourneyId(Map<String, Long> params) {
    	return super.queryForList("PROD_TIME_PRICE.getBranchIdsByMultiJourneyId", params);
    }
	
	public void updateTimePriceForBranchId(Map<String, Object> paramMap){
		super.update("PROD_TIME_PRICE.updateTimePriceForBranchId", paramMap);
	}

    public Date selectNearBranchTimePriceByBranchIdFromTemp(Long prodBranchId) {
        Map<String,Object> map=new HashMap<String, Object>();
        map.put("prodBranchId", prodBranchId);
        return (Date)super.queryForObject("PROD_TIME_PRICE.selectNearBranchTimePriceByBranchIdFromTemp", map);
    }

    public Date selectNearBranchTimePriceByBranchIdAndDayFromTemp(Long prodBranchId, Date beginDay) {
        Map<String,Object> map=new HashMap<String, Object>();
        map.put("prodBranchId", prodBranchId);
        map.put("day", beginDay);
        return (Date)super.queryForObject("PROD_TIME_PRICE.selectNearBranchTimePriceByBranchIdAndDayFromTemp", map);
    }

    public List<TimePrice> selectProdTimePriceByParamsFromTemp(Map<String, Object> param) {
        return super.queryForList("PROD_TIME_PRICE.selectProdTimePriceByParamsFromTemp", param);
    }
}